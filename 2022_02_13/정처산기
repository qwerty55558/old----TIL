-소프트웨어 아키텍쳐
소프트웨어의 골격이 되는 기본 구조, 소프트웨어 구성요소들 간의 관계를 표현하는 시스템의 구조 또는 구조체

소프트웨어 아키텍쳐의 기본 원리: 모듈화 추상화 단계적분해 정보은닉

모듈화: 시스템의 기능들을 모듈단위로 나눔
추상화: 문제의 전체적이고 포괄적인 개념을 설계한 후 차례로 세분화하여 구체화 시켜나가는 것
단계적 분해: 하향식 설계 전략, 분제를 상위의 중요 개념으로부터 하위의 개념으로 구체화 시키는 분할기법
정보 은닉: 한 모듈 내부에 포함된 절차와 자료들의 정보가 감추어져 다른 모듈이 접근하거나 변경하지 못 하도록 하는 기법

소프트웨어 아키텍쳐 품질 속성: 시스템 측면, 비즈니스 측면, 아키텍쳐 측면으로 구분

설계 과정: 설계 목표 설정 -> 시스템 타입 결정 -> 아키텍쳐 패턴 적용 -> 서브시스템 구체화 -> 검토

시스템 타입: 대화형 시스템(쇼핑몰), 이벤트 중심 시스템(전화, 비상벨), 변환형 시스템(컴파일러, 네트워크프로토콜), 객체 영속형 시스템(서버관리)

협약에 의한 설계: 선행조건, 결과조건, 불변조건

-아키텍쳐 패턴
아키텍쳐 설계 시에 참조할 수 있는 전형적인 해결 방식 또는 예제

장점: 개발시간 단축 성능 향상, 안정적 개발, 의사소통 간편, 시스템 구조 이해가 쉬워 비참여자도 쉬운 이해 가능, 개발 전에 시스템 예측 가능

종류: 레이어 패턴, 클라이언트-서버패턴, 파이프-필터 패턴, 모델-뷰-컨트롤러(MVC)패턴

레이어패턴: 고전적방법, 각 서브시스템들이 계층구조를 이루며, 상위계층은 하위계층에 대한 서비스 제공자가 되고 하위계층은 상위계층의 클라이언트가 됨
OSI 참조모델이 대표적 (물데네전세표응)

클라이언트-서버 패턴: 하나의 서버 컴포넌트와 다수의 클라이언트 컴포넌트로 구성되는 패턴, 서버는 항상 대기(가용성)

파이프-필터 패턴:  데이터 스트림 절차의 각 단계를 필터 컴포넌트로 캡슐화 하여 파이프를 통해 데이터를 전송 , UNIX의 Shell이 대표적

모델-뷰-컨트롤러 패턴: 서브시스템을 3개의 부분으로 구조화하는 패턴 모델: 서브시스템의 핵심기능과 데이터 보관
뷰: 사용자에게 정보를 표시 컨트롤러: 사용자에게 받은 입력을 처리 , 여러개의 뷰를 만들 수 있으므로 대화형 어플리케이션에 적합

마스터-슬레이브 패턴: 작업의 주체인 마스터 컴포넌트가 슬레이브 컴포넌트에게 작업을 지시하여 수행하게 만듦 (구조는 같음) 장애허용 시스템, 병렬컴퓨팅시스템에 사용

브로커 패턴: 사용자가 원하는 서비스를 브로커 컴포넌트에 요청하면 브로커 컴포넌트가 적합한 컴포넌트에 연결해줌 분산환경시스템에서 주로 활용

피어 투 피어 패턴: 피어를 하나의 컴포넌트로 간주하며, 각 피어는 서비스를 호출하는 클라이언트가 될 수도 있고 서비스를 제공하는 서버가 될 수도 있다.
멀티스레딩 방식

이벤트-버스 패턴: 소스가 특정 채널에 이벤트 메시지를 발행하면 해당 채널을 구독한 리스너들이 메시지를 받아 이벤트를 처리
주요 컴포넌트: 소스(이벤트 생성), 리스터(이벤트 수행), 채널(이벤트 통로), 버스(채널 관리)

블랙보드 패턴: 모든 컴포넌트 들이 공유 데이터 저장소와 블랙보드 컴포넌트에 접근이 가능한 형태로, 컴포넌트들은 검색을 통해 블랙보드에서 원하는
데이터를 찾을 수 있다. 해결책이 명확하지 않은 문제를 해결하는데 유용한 패턴 음성인식, 차량식별, 신호해석 등에 사용
 
인터프리터 패턴: 프로그램 코드의 각 라인을 수행하는 방법을 지정하고, 기호마다 클래스를 갖도록 구성, 특정 언어로 작성된 프로그램 코드를 해석하는 컴포넌트를 설계할 때
사용

-객체지향
현실세계의 개체를 기계의 부품처럼 하나의 객체로 만들어, 기계적인 부품들을 조립하여 제품을 만들 듯이 소프트웨어를 개발할 때에도 객체들을 조립해서 작성할
수 있는 기법

주요 구성 요소와 개념 : 객체, 클래스, 캡슐화, 상속, 다형성, 연관성

객체: 데이터와 데이터를 처리하는 함수를 캡슐화 해놓은 하나의 소프트웨어 모듈

클래스: 객체의 집합, 객체의 타입

캡슐화: 속성(어트리뷰트)와 함수(메소드)를 하나로 묶는 것

상속: 부모의 모든 속성과 연산을 하위클래스가 물려받는것

다형성: 클래스가 연산을 수행할 때 하나의 메세지에 대하 각각의 클래스가 가지고 있는 고유한 특성으로 응답할 수 있는 능력

연관성: 두 개 이상의 클래스들이 상호 참조하는 관계

-객체지향의 분석
사용자의 요구사항을 분석하여 요구된 문제와 관련된 클래스, 연관된 속성과 연산, 그들 간의 관계를 정의하여 모델링 하는 작업

럼바우 방법: 일반적으로 사용되는 방법, 분석 활동을 객체모델 동적모델 기능모델로 나누어 수행

부치 방법: 미시적 개발 프로세스와 거시적 개발 프로세스를 사용하는 방법

제이콥슨 방법: 유스케이스 강조

코아드 유드론 방법: ER  다이어그램 사용  과정으로 구성

맆스 브록 방법: 분석과 설계간의 구분이 없고 고객 명세서를 평가하여 설계 작업을 연속적으로 수행하는 기법

럼바우분석기법: 객체모델링 -> 동적모델링 -> 기능모델링 순으로 이뤄짐

객체지향 설계 원칙: SOLID원칙 , 단일책임원칙, 개방-폐쇄원칙, 리스코프 치환 원칙, 인터페이스 분리 원칙, 의존 역전 원칙

-디자인 패턴
각 모듈의 세분화된 역할이나 모듈들 간의 인터페이스와 같은 코드를 작성하는 수준의 세부적인 구현 방안을 설계할 때 참조할 수 있는 전형적인 해결 방법

GOF의 디자인 패턴: 생성패턴 5개 구조패턴 7개 행위패턴 11개

아키텍쳐패턴 vs 디자인패턴: 아키텍쳐패턴이 더 상위, 아키텍쳐: 전체 시스템 구조 설계 디자인: 서브시스템에 속하는 컴포넌트들과 그 관계 설계, 디자인 패턴이
아키텍쳐 패턴 구현에 유용하게 사용

디자인패턴 장점: 범용적인 코딩 스타일로 구조파악에 용이, 생산성 높이기에 적합, 시간 비용 절약, 개발자간의 원활한 의사소통 가능, 유연한 대처 가능
단점: 초기 투자비용 부담, 객체지향 기반이라 다른 기반의 어플리케이션에는 부적합

생성패턴: 추상팩토리, 빌더, 팩토리메소드, 프로토타입, 싱글톤

구조패턴: 어댑터, 브리지, 컴포지트, 데코레이터, 퍼싸드, 플라이웨이트, 프록시

행위패턴: 책임연쇄, 커맨드, 인터프리터, 반복자, 중재자, 메멘토, 옵저버, 상태, 전략 , 템플릿메소드, 방문자

