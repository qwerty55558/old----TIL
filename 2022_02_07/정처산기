-소프트웨어 개발 방법론의 개요
소프트웨어 개발 방법론의 목적은 소프트웨어의 생산성의 품질 향상이다. 종류로는 구조적 방법론, 정보공학 방법론, 객체지향 방법론, 컴포넌트 기반 방법론,
애자일 방법론, 제품 계열 방법론 등이 있다.

구조적 방법론: 정형화된 분석 절차에 따라 사용자 요구사항을 파악하여 문서화 하는 처리 중심의 방법론
1960년대까지 가장 많이 적용된 소프트웨어 개발 방법론, 쉬운 이해 및 검증이 가능한 프로그램 코드 생성 목적, 분할과 정복

정보공학 방법론: 정보시스템 의 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게 통합 및 적용하는 자료 중심의 방법론
정보시스템 개발 주기를 이용하여 대규모 정보 시스템을 구축하는데에 적합

객체지향 방법론: 현실 세계의 개체를 기계의 부품처럼 하나의 객체로 만들어, 소프트웨어 개발 시에 기계의 부품을 조립하듯이 객체들을 조립하여서 필요한
소프트웨어를 구현하는 방버론
구조적기법의 문제점으로 인한 소프트웨어 위기의 해결책으로 채택, 구성요소: 객체 클래스 메시지
기본 원칙: 캡슐화, 정보은닉, 추상화, 상속성, 다형성

컴포넌트 기반 방법론: 기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 어플리케이션을 만드는 방법론
컴포넌트의 재사용이 가능하여 시간과 노력을 절감, 새로운 기능을 추가하는 것이 간단하여 확장성 보장, 유지 보수 비용을 최소화하고 생산성 및 품질 향상

애자일 방법론: 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론
소규모 프로젝트, 고도로 숙달된 개발자, 급변하는 요구사항에 적합 종류: XP(익스트림 프로그래밍), 스크럼, 칸반, 크리스탈

제품계열 방법론: 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론
임베디드 소프트웨어를 개발하는데 적합, 영역공학과 응용공학으로 구분, 둘의 연계를 위해 제품의 요구사항, 아키텍처, 조립생산이 필요

-스크럼 기법
팀원 스스로가 스크럼 팀을 구성해야하며, 개발작업에 관한 모든 것을 스스로 해결 할 수 있어야 한다.

제품책임자: 제품에 대한 이해도가 높고 요구사항을 책임지고 의사 결정할 사람으로 선정하는데, 주로 개발 의뢰자나 사용자가 담당한다.
의견을 종합하여 제품에 대한 요구사항을 작성하는 주체이다 백로그(요구사항)을 작성하고 우선순위 지정
팀원들이 스토리(백로그에 등록될 요구사항)를 추가할 수는 있지만 우선순위 X, 제품에 대한 테스트를 수행하면서 주기적으로 요구사항의 우선순위 갱신

스크럼마스터: 스크럼 팀이 스크럼을 잘 수행할 수 있도록 객관적인 시각에서 조언을 해주는 가이드 역할을 수행한다. 팀원 통제가 목표가 아님
일일 스크럼 회의를 주관하여 진행사항 검토, 갭라 과정에서 발생된 장애요소를 공론화하여 처리

개발팀: 제품 책임자와 스크럼 마스터를 제외한 모든 팀원으로, 개발자 외에도 디자이너, 테스터 등 제품개발을 위해 참여하는 모든사람이 대상

스크럼 개발 프로세스: 제품 백로그 -> 스프린트 계획 회의 -> 스프린트 -> 일일 스크럼 회의 -> 스프린트 검토 회의 -> 스프린트 회고

-XP(eXtreme Programming): 수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법
짧고 반복적인 개발주기, 단순한 설계, 고객의 적극적인 참여로 소프트웨어를 빠르게 개발하는 것이 목표
릴리즈(몇 개의 요구사항이 적용되어 부분적으로 기능이 완료된 제품을 제공)의 기간을 짧게 반복하면서 고객을 직접 참여시킴으로써 요구한 기능이 제대로 작동하는지
고객이 직접 확인할 수 있다.
소규모 인원의 개발 프로젝트에 효과적, 핵심가치: 의사소통 단순성 용기 존중 피드백

개발 프로세스: 사용자 스토리, 릴리즈 계획 수립, 스파이크, 이터레이션, 승인검사, 소규모릴리즈

주요 실천 방법: Pair Programming, Collective Ownership, Test-Driven Development, Whole Team, Continuous Intergration, Design Improvement, Refactoring, Small Releases



