#HTTP란 무엇인가?

텍스트 기반의 통신 규약이며 인터넷에서 데이터를 주고받을 수 있는 프로토콜

#동작

클라이언트 즉, 사용자가 브라우저를 통해서 어떠한 서비스를 요청(request)하면 서버에서는 요청사항에 맞는 결과를 찾아 
사용자에게 응답(response)하는 형태로 동작한다

Plain text로부터 JSON 데이터 및 XML과 같은 형태의 정보도 주고 받을 수 있으며, 보통은 클라이언트가 어떠한 정보를 HTML로 받고싶은지,
JSON 형태로 받고싶은지 명시해주는 경우가 많다.

#특징

HTTP 메세지는 HTTP 서버와 HTTP 클라이언트에 의해 해석이 된다.

TCP / IP 을 이용하는 응용 프로토콜이다.

HTTP는 연결상태를 유지하지 않는 비연결성 프로토콜이다. (단점 해결을 위해 Cookie와 Session이 등장)

따라서 요청 / 응답 방식으로 작동한다.

#예시

서버 : 어떠한 자료에 대한 접근을 관리하는 네트워크 상의 시스템 (요청에 대한 응답을 보내준다.)

클라이언트 : 그 자료에 접근할 수 있는 프로그램

클라이언트 프로그램에서 사용자가 회원가입을 시도하게 되면, 서버로 회원정보를 보내게 되고 서버는 회원 정보를 저장해주기도 한다. 

이 과정에서 클라이언트와 서버 간의 교류가 HTTP라는 규약을 이용하여 발생하게 된다.

#Request (요청)

클라이언트가 서버에게 연락하는 것을 요청이라고 하며 요청을 보낼 때는 요청에 대한 정보를 담아 서버로 보낸다.

식당에서 주문서 작성하는 것과 같다.

종류)

GET : 자료를 요청할 때 사용

POST : 자료의 생성을 요청할 때 사용

PUT : 자료의 수정을 요청할 때 사용

DELETE : 자료의 삭제를 요청할 때 사용

예시)

1. GET https://velog.io/@surim014 HTTP/1.1								// 시작줄
2. User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...			  // 헤더
3. Upgrade-Insecure-Requests: 1

첫 줄은 시작줄로 메서드 구조 버전으로 구성됨

GET << HTTP Method

htttps://~~ << 사이트 주소

HTTP/1.1 << HTTP 버전

두 번째 줄은 헤더이며 요청에 대한 정보를 담고있다. (User-Agent, Upgreade-Insercure, Request 등등이 헤더이며 종류가 매우 많음)

세 번째 줄은 본문이고 요청을 할 때 함께 보낼 데이터를 담는 부분이다.

#Response (응답)

서버가 요청에 대한 답변을 클라이언트에게 보내는 것을 응답이라고 한다.

Status Code (상태 코드): 굉장히 많은 종류가 있으며 모두 세자리 숫자로 이뤄져 있다.

1XX (조건부 응답) : 요청을 받았으며 작업을 계속한다.

2XX (성공) : 클라이언트가 요청한 동작을 수신하여 이해했고 승낙했으며 성공적으로 처리했음을 알린다.

3XX (리다이렉션 완료) : 클라이언트는 요청을 마치기 위해 추가 동작을 취해야 한다.

4XX (요청 오류) : 클라이언트에 오류가 있음을 나타낸다 (404 not found << 유명한 에러코드)

5XX (서버 오류) : 서버가 유효한 요청을 명백하게 수행하지 못했음을 나타낸다.

예시)

HTTP/1.1 200 OK														// 시작줄
Connection: keep-alive												 // 헤더
Content-Encoding: gzip												 
Content-Length: 35653
Content-Type: text/html;

<!DOCTYPE html><html lang="ko" data-reactroot=""><head><title...

첫 줄은 시작줄, 버전 상태코드 상태메세지로 구성 (200은 성공적인 요청)

두 번째 줄은 헤더, 응답에 대한 정보를 담고있다.

세 번째 줄은 본문, 응답에는 대부분의 경우 본문이 있다. 보통 요청한 데이터를 담아주기 때문 응답 메세지에 html이 있는데
이 html을 받아 브라우저가 화면에 렌더링한다.
